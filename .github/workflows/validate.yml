name: validate
on:
  workflow_call:
    inputs:
      SDL2_VERSION:
        type: string
        required: false
        default: '2.30.3'
      N64RECOMP_COMMIT:
        type: string
        required: false
        default: '989a86b36912403cd323de884bf834f2605ea770'
    secrets:
      MK64_REPO_WITH_PAT:
        required: true
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        type: [ Debug, Release ]
        os: [ ubuntu-22.04 ]
    name: ubuntu-22.04 (x64, ${{ matrix.type }}, Native, AppImage)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-z64re-ccache-${{ matrix.type }}-x64-${{ inputs.N64RECOMP_COMMIT }}
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libsdl2-dev libgtk-3-dev lld llvm clang-15 libfuse2

          # Install SDL2
          echo ::group::install SDL2

          # Enable ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

          wget https://github.com/libsdl-org/SDL/releases/download/release-${{ inputs.SDL2_VERSION }}/SDL2-${{ inputs.SDL2_VERSION }}.tar.gz
          tar -xzf SDL2-${{ inputs.SDL2_VERSION }}.tar.gz
          cd SDL2-${{ inputs.SDL2_VERSION }}
          ./configure
          make -j 10
          sudo make install
          sudo cp -av /usr/local/lib/libSDL* /lib/x86_64-linux-gnu/
          echo ::endgroup::

      - name: Get extra dependencies
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MK64_REPO_WITH_PAT }}
          token: ${{ secrets.MK64_TOKEN }}
          path: mk64recomp-secret
      - name: Prepare Build
        run: cp -r mk64recomp-secret/mk64.us.z64 ./

      - name: Build N64Recomp & RSPRecomp
        run: |
          git clone https://github.com/Mr-Wiseguy/N64Recomp.git --recurse-submodules N64RecompSource
          cd N64RecompSource
          git checkout ${{ inputs.N64RECOMP_COMMIT }}
          git submodule update --init --recursive
          
          # enable ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          
          # Build N64Recomp & RSPRecomp
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build
          cmake --build cmake-build --config Release --target N64RecompCLI -j $(nproc)
          cmake --build cmake-build --config Release --target RSPRecomp -j $(nproc)
          
          # Copy N64Recomp & RSPRecomp to root directory
          cp cmake-build/N64Recomp ..
          cp cmake-build/RSPRecomp ..
      - name: Run N64Recomp & RSPRecomp
        run: |
          ./N64Recomp us.toml
          ./RSPRecomp aspMain.us.toml

      - name: Build MarioKart64Recomp
        run: |-
          # enable ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=clang++-15 -DCMAKE_C_COMPILER=clang-15 -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build
          cmake --build cmake-build --config ${{ matrix.type }} --target MarioKart64Recompiled -j $(nproc)
      - name: Prepare Archive
        run: |
          mv cmake-build/MarioKart64Recompiled MarioKart64Recompiled
          rm -rf assets/scss
          tar -czf MarioKart64Recompiled.tar.gz MarioKart64Recompiled assets/ recompcontrollerdb.txt
      - name: Archive MarioKart64Recomp
        uses: actions/upload-artifact@v4
        with:
          name: MarioKart64Recompiled-${{ runner.os }}-X64-${{ matrix.type }}
          path: MarioKart64Recompiled.tar.gz
      - name: Build AppImage
        run: |-
          ./.github/linux/appimage.sh 
      - name: MarioKart64Recomp AppImage
        uses: actions/upload-artifact@v4
        with:
          name: MarioKart64Recompiled-AppImage-X64-${{ matrix.type }}
          path: MarioKart64Recompiled-*.AppImage
  build-linux-flatpak:
    runs-on: ubuntu-latest
    env:
      FLATPAK_ID: io.github.mariokart64recomp.mariokart64recomp
      FREEDESKTOP_VERSION: 23.08
      LLVM_VERSION: 18
    strategy:
      matrix:
        type: [ Debug, Release ]
        os: [ ubuntu-latest ]
    name: ${{ matrix.os }} (x64, ${{ matrix.type }}, Flatpak)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-z64re-ccache-${{ matrix.type }}-x64-${{ inputs.N64RECOMP_COMMIT }}
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak-builder ccache lld

      - name: Get extra dependencies
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MK64_REPO_WITH_PAT }}
          token: ${{ secrets.MK64_TOKEN }}
          path: mk64recomp-secret
      - name: Prepare Build
        run: cp -r mk64recomp-secret/mk64.us.z64 ./

      - name: Prepare Flatpak
        run: |
          flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak --user install -y flathub org.freedesktop.Sdk//${{ env.FREEDESKTOP_VERSION }}
          flatpak --user install -y flathub org.freedesktop.Sdk.Extension.llvm${{ env.LLVM_VERSION }}//${{ env.FREEDESKTOP_VERSION }}

      - name: Build MarioKart64Recomp
        run: |-
          export CCACHE_DIR=/tmp/ccache
          git config --global protocol.file.allow always
          make -C patches CC=clang LD=ld.lld
          flatpak-builder --user --force-clean --install-deps-from=flathub --repo=repo --ccache builddir ./flatpak/${{ env.FLATPAK_ID }}.json
          flatpak build-bundle repo ./${{ env.FLATPAK_ID }}.flatpak ${{ env.FLATPAK_ID }} --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MarioKart64Recompiled-Flatpak-X64-${{ matrix.type }}
          path: ./${{ env.FLATPAK_ID }}.flatpak
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        type: [ Debug, RelWithDebInfo ]
    name: windows (${{ matrix.type }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-z64re-ccache-${{ matrix.type }}
      - name: Install Windows Dependencies
        run: |
          choco install ninja
          Remove-Item -Path "C:\ProgramData\Chocolatey\bin\ccache.exe" -Force -ErrorAction SilentlyContinue
      - name: Download portable LLVM
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.3/LLVM-19.1.3-Windows-X64.tar.xz" -OutFile "LLVM.tar.xz"
          New-Item -ItemType Directory -Path portable-llvm > $null
          7z x LLVM.tar.xz
          7z x LLVM.tar -oportable-llvm
      - name: Configure Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
      - name: Get extra dependencies
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MK64_REPO_WITH_PAT }}
          token: ${{ secrets.MK64_TOKEN }}
          path: mk64recomp-secret
      - name: Prepare Build
        run: copy .\mk64recomp-secret\mk64.us.z64 .\

      - name: Build N64Recomp & RSPRecomp
        run: |
          git clone https://github.com/Mr-Wiseguy/N64Recomp.git --recurse-submodules N64RecompSource
          cd N64RecompSource
          git checkout ${{ inputs.N64RECOMP_COMMIT }}
          git submodule update --init --recursive

          # enable ccache
          set $env:PATH="$env:USERPROFILE/.cargo/bin;$env:PATH"
          $cpuCores = (Get-CimInstance -ClassName Win32_Processor).NumberOfLogicalProcessors

          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build
          cmake --build cmake-build --config Release --target N64RecompCLI -j $cpuCores
          cmake --build cmake-build --config Release --target RSPRecomp -j $cpuCores

          # Copy N64Recomp & RSPRecomp to root directory
          cp cmake-build/N64Recomp.exe ..
          cp cmake-build/RSPRecomp.exe ..
      - name: Run N64Recomp & RSPRecomp
        run: |
          ./N64Recomp.exe us.toml
          ./RSPRecomp.exe aspMain.us.toml
      - name: Build MarioKart64Recomp
        run: |-
          # enable ccache
          set $env:PATH="$env:USERPROFILE/.cargo/bin;$env:PATH"
          $cpuCores = (Get-CimInstance -ClassName Win32_Processor).NumberOfLogicalProcessors

          # remove LLVM from PATH so it doesn't overshadow the one provided by VS
          $env:PATH = ($env:PATH -split ';' | Where-Object { $_ -ne 'C:\Program Files\LLVM\bin' }) -join ';'

          cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_MAKE_PROGRAM=ninja -DPATCHES_C_COMPILER="..\portable-llvm\LLVM-19.1.3-Windows-X64\bin\clang" -DPATCHES_LD="..\portable-llvm\LLVM-19.1.3-Windows-X64\bin\ld.lld" -G Ninja -S . -B cmake-build -DCMAKE_CXX_FLAGS="-Xclang -fexceptions -Xclang -fcxx-exceptions"
          cmake --build cmake-build --config ${{ matrix.type }} --target MarioKart64Recompiled -j $cpuCores
        env:
          SDL2_VERSION: ${{ inputs.SDL2_VERSION }}
      - name: Prepare Archive
        run: |
          Move-Item -Path "cmake-build/MarioKart64Recompiled.exe" -Destination "MarioKart64Recompiled.exe"
          Move-Item -Path "cmake-build/dxcompiler.dll" -Destination "dxcompiler.dll"
          Move-Item -Path "cmake-build/dxil.dll" -Destination "dxil.dll"
          Move-Item -Path "cmake-build/SDL2.dll" -Destination "SDL2.dll"
          Move-Item -Path "cmake-build/MarioKart64Recompiled.pdb" -Destination "MarioKart64Recompiled.pdb"
          Remove-Item -Path "assets/scss" -Recurse -Force
      - name: Archive MarioKart64Recomp
        uses: actions/upload-artifact@v4
        with:
          name: MarioKart64Recompiled-${{ runner.os }}-${{ matrix.type }}
          path: |
            MarioKart64Recompiled.exe
            dxcompiler.dll
            dxil.dll
            SDL2.dll
            assets/
            recompcontrollerdb.txt
      - name: Archive Debug Files
        uses: actions/upload-artifact@v4
        with:
          name: MarioKart64Recompiled-PDB-${{ matrix.type }}
          path: |
            MarioKart64Recompiled.pdb
  build-macos:
    runs-on: macos-14
    strategy:
      matrix:
        type: [ Debug, Release ]
    name: macos (x64, arm64, ${{ matrix.type }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: recursive
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-z64re-ccache-${{ matrix.type }}
      - name: Homebrew Setup
        run: |
          brew install ninja
          brew uninstall --ignore-dependencies libpng freetype
      - name: MacPorts Setup
        uses: melusina-org/setup-macports@v1
        id: 'macports'
        with:
          parameters: '.github/macos/macports.yaml'

      - name: Get extra dependencies
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MK64_REPO_WITH_PAT }}
          token: ${{ secrets.MK64_TOKEN }}
          path: mk64recomp-secret
      - name: Prepare Build
        run: cp -r mk64recomp-secret/mk64.us.z64 ./

      - name: Build N64Recomp & RSPRecomp
        run: |
          git clone https://github.com/Mr-Wiseguy/N64Recomp.git --recurse-submodules N64RecompSource
          cd N64RecompSource
          git checkout ${{ inputs.N64RECOMP_COMMIT }}
          git submodule update --init --recursive
          
          # enable ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          
          # Build N64Recomp & RSPRecomp
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build
          cmake --build cmake-build --config Release --target N64Recomp -j $(sysctl -n hw.ncpu)
          cmake --build cmake-build --config Release --target RSPRecomp -j $(sysctl -n hw.ncpu)
          
          # Copy N64Recomp & RSPRecomp to root directory
          cp cmake-build/N64Recomp ..
          cp cmake-build/RSPRecomp ..
      - name: Run N64Recomp & RSPRecomp
        run: |
          ./N64Recomp us.toml
          ./RSPRecomp aspMain.us.toml
      - name: Build MarioKart64Recomp
        run: |-
          # enable ccache
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_MAKE_PROGRAM=ninja -G Ninja -S . -B cmake-build \
          -DPATCHES_LD=/opt/local/bin/ld.lld-mp-18 -DCMAKE_AR=/opt/local/bin/llvm-ar-mp-18 -DPATCHES_C_COMPILER=/opt/local/bin/clang-mp-18 \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          cmake --build cmake-build --config ${{ matrix.type }} --target MarioKart64Recompiled -j $(sysctl -n hw.ncpu)
      - name: Prepare Archive
        run: |
          mv cmake-build/MarioKart64Recompiled.app MarioKart64Recompiled.app
          zip -r -y MarioKart64Recompiled.zip MarioKart64Recompiled.app
      - name: Archive MarioKart64Recomp
        uses: actions/upload-artifact@v4
        with:
          name: MarioKart64Recompiled-${{ runner.os }}-${{ matrix.type }}
          path: MarioKart64Recompiled.zip
